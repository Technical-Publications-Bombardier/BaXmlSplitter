@page "/report"
@using System.Xml
@using MauiXmlSplitter.Models
@using MauiXmlSplitter.Resources
@using Microsoft.AspNetCore.WebUtilities
@inject XmlSplitterViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IXmlSplitReport<XmlSplitter> Report
@inject IJSRuntime JSRuntime

<div class="px-4 d-flex justify-content-start">
    <Button @ref="SaveHtml" Color="ButtonColor.Primary" Size="Size.ExtraSmall" @onclick="OnSaveClick">
        <Icon Name="IconName.Floppy"></Icon>
    </Button>
    <Modal @ref="ReportModal" Title="XML Splitting Report Written as HTML" UseStaticBackdrop="true" CloseOnEscape="true">
        <BodyTemplate>
            <p>
                @AppResources.XmlSplitReportWrittenAsHtml
                <a href="@(ReportPath?.AbsoluteUri)" target="_blank">
                    <code>@ReportPath?.LocalPath</code>
                </a>
            </p>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Primary" @onclick="@(async ()=> { if (ReportModal is not null) await ReportModal.HideAsync(); })">@AppResources.OK</Button>
        </FooterTemplate>
    </Modal>
</div>
<div id="splittingReport">

    <p>The source XML, '@(Path.GetFileName(ViewModel.SourceXml))', was split into @(Report.Count) unit of work nodes.</p>
    <p>The complete splitting report is written as @(string.Join(", ", Enum.GetNames<XmlSplitReport.ReportFormat>())) files in the WIP package with the following file names:</p>
    <ul>
        @{
            foreach (var extension in SplittingReportFileExtensions)
            {
                if (Directory.GetFiles(OutputDir, $"*.{extension}").FirstOrDefault(file => XmlSplitterViewModel.ReportDateFormatRe().IsMatch(file)) is { } reportPath)
                {
                    var uri = new Uri(reportPath).AbsoluteUri;
                    <li>
                        <a href="@uri" target="_blank">@($"{Path.GetFileName(reportPath)}")</a>
                    </li>
                }
            }
        }
    </ul>
    <p>Below is the full HTML report of the XML splitting results:</p>
    <Callout Type="CalloutType.Info">The tag of the parent is the <em>most recent containing XML node</em> having a <code>key</code> attribute; or, where there is no such <code>key</code>-bearing node, the root node for the document is indicated. For brevity, the parent tag is represented as a self-closing tag without inner XML.</Callout>
    <Callout Type="CalloutType.Success">
        "Node" in this context refers to the unit of work as an
        <a href="https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlnode?view=net-8.0">
            <code>XmlNode</code>
        </a> that was split off from the source
        <a href="https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmldocument?view=net-8.0">
            <code>XmlDocument</code>
        </a>.
    </Callout>
    <table class="table">
        <caption>Table showing the details on each node that was split from the source XML.</caption>
        <colgroup>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
        </colgroup>
        <tr>
            <th>Checkout Parent Number</th>
            <th>Checkout Parent Element&rsquo;s Name</th>
            <th>Checkout Parent&rsquo;s &lsquo;<code>key</code>&rsquo; Value</th>
            <th>Checkout Parent&rsquo;s Opening Tag</th>
            <th>UOW Node Number</th>
            <th>UOW Node Element&rsquo;s Name</th>
            <th>UOW Node&rsquo;s &lsquo;<code>key</code>&rsquo; Value</th>
            <th>Key-bearing Parent&rsquo;s Opening Tag</th>
            <th>Full XPath to UOW Node</th>
            <th>Filename of Split</th>
            <th>UOW State Value</th>
            <th>UOW State Name</th>
            <th>UOW State Remark</th>
        </tr>
        @{
            Index = 0;
        }
        @foreach (var entry in Report)
        {
            <tr>
                @if (Index++ == 0)
                {
                    // Checkout Parent Number
                    <td rowspan="@Report.GetNumSiblings(entry)">
                        <code>@entry.CheckoutParentNumber</code>
                    </td>
                    // Checkout Parent Name
                    <td rowspan="@Report.GetNumSiblings(entry)">
                        <code>@entry.CheckoutParent.Name</code>
                    </td>
                    // Checkout's 'Key' Value
                    <td rowspan="@Report.GetNumSiblings(entry)">
                        <code>@(entry.CheckoutParent.Attributes?["key"]?.Value ?? "&nbsp;")</code>
                    </td>
                    // Checkout Parent Tag
                    <td rowspan="@Report.GetNumSiblings(entry)">
                        <code>@entry.CheckoutParent.OuterXml</code>
                    </td>
                }
                <!-- Node Number -->
                <td>
                    <code>@entry.NodeNumber</code>
                </td>
                <!-- Node Element Name -->
                <td>
                    <code>@entry.UowNode.Name</code>
                </td>
                <!-- Node's 'Key' Value -->
                <td>
                    <code>@(entry.UowNode.Attributes?["key"]?.Value ?? "&nbsp;")</code>
                </td>
                <!-- Key-bearing Parent's Tag -->
                <td>
                    <code>@entry.KeyedParent.OuterXml</code>
                </td>
                <!-- Full XPath -->
                <td>
                    <code>@entry.FullXPath</code>
                </td>
                <!-- Filename of Split -->
                <td>
                    <code>@entry.FilenameOfSplit</code>
                </td>
                <!-- ETPS UOW State Value -->
                <td>
                    <code>@entry.UowState.StateValue</code>
                </td>
                <!-- ETPS UOW State Name --><td>@entry.UowState.StateName</td>
                <!-- ETPS UOW State Remark -->
                <td>@(string.IsNullOrEmpty(entry.UowState.Remark) ? "&nbsp;" : entry.UowState.Remark)</td>
            </tr>
        }
    </table>
</div>

@code {

    /// <summary>
    ///     The directory to write the split files out to
    /// </summary>
    protected string OutputDir = default!;

    /// <summary>
    ///     Current <see cref="XmlSplitReportEntry" /> index of the report.
    /// </summary>
    protected int Index { get; set; }

    /// <summary>
    ///     Button to save the XML splitting report as HTML
    /// </summary>
    public Button SaveHtml { get; set; } = default!;

    /// <summary>
    ///     The path to the HTML version of the XML splitting report
    /// </summary>
    public Uri? ReportPath { get; set; }

    /// <summary>
    ///     Determines if a node <paramref name="possibleChild" /> is a child of <paramref name="parent" />
    /// </summary>
    /// <param name="parent"></param>
    /// <param name="possibleChild"></param>
    /// <returns>
    ///     <c>true</c> if <paramref name="possibleChild" /> is a child of <paramref name="parent" />, <c>false</c>
    ///     otherwise.
    /// </returns>
    public static bool IsDescendant(XmlNode parent, XmlNode possibleChild)
    {
        return parent.Equals(possibleChild) /* possibleChild is the same node as parent */ ||
               (possibleChild.ParentNode is not null /* false when possibleChild has no parent */ &&
                IsDescendant(parent, possibleChild.ParentNode));
        // recursively check parent's parent
    }

    /// <summary>
    ///     The report formats
    /// </summary>
    private static readonly string[] SplittingReportFileExtensions = Enum.GetNames<XmlSplitReport.ReportFormat>();

    private Modal? ReportModal { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("outputDir", out var initOutputDirectory))
        {
            OutputDir = initOutputDirectory.ToString();
        }
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (SynchronizationContext.Current is not null && Report is { } report)
        {
            report.OnEntryAdded += StateHasChanged;
        }
    }

    private async Task OnSaveClick()
    {
        SaveHtml.ShowLoading(AppResources.Saving);
        try
        {
            if (await JSRuntime.InvokeAsync<string>("getRenderedHtml") is { } splittingReport && await FileSystem.OpenAppPackageFileAsync("ReportTemplate.html").ConfigureAwait(false) is { } htmlStream)
            {
                // Save to `OutputDir`

                TextReader htmlReader = new StreamReader(htmlStream);
                var html = await htmlReader.ReadToEndAsync();
                html = html.Replace("""<div class="replaceable"></div>""", $"{Environment.NewLine}    {splittingReport}{Environment.NewLine}");
                var reportPath = Path.Join(OutputDir, "report.html");
                await File.WriteAllTextAsync(reportPath, html).ConfigureAwait(true);
                if (ReportModal is not null && Uri.TryCreate(reportPath, UriKind.Absolute, out var tempUri))
                {
                    ReportPath = tempUri;
                    await ReportModal.ShowAsync().ConfigureAwait(true);
                }
            }
        }
        finally
        {
            await InvokeAsync(SaveHtml.HideLoading).ConfigureAwait(false);
        }
    }

}