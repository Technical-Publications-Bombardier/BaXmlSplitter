name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish
      run: dotnet publish BaXmlSplitter.csproj --configuration Release --output ./publish --runtime win-x64 --self-contained true
    - name: Embed environment variables
      shell: pwsh
      run: |
        Write-Verbose -Message "Setting Application Insights JSON" -Verbose; try { Get-Item -Path (Join-Path -Path 'Env:' -ChildPath 'AZUREAPPLICATIONINSIGHTS') -ErrorAction SilentlyContinue | ConvertFrom-Json -Depth 99 | ConvertTo-Json -Depth 99 | Out-File -FilePath .\Resources\ApplicationInsights.json -Verbose } catch { Write-Warning -Message "Failed setting up Application Insights JSON: $_" -Verbose }
    - name: Zip the executable
      shell: pwsh
      run: |
        Write-Verbose -Message "Compressing publish output" -Verbose; try { Get-ChildItem -Path ./publish -Include @('BaXmlSplitter.exe') -File -Recurse | Select-Object -First 1 | Compress-Archive -DestinationPath ./publish/BaXmlSplitter.zip -CompressionLevel Optimal -PassThru -Verbose | Write-Verbose -Verbose } catch { Write-Warning -Message "Failed compressing publish output" -Verbose; throw $_; }
    - name: Handover Artifacts to Linux Runner
      uses: actions/upload-artifact@v3
      with:
        name: BaXmlSplitter
        path: ./publish/BaXmlSplitter.zip

  deploy:

    needs: build

    runs-on: ubuntu-latest

    steps:
    - name: Receive Artifacts from Windows Runner
      uses: actions/download-artifact@v3
      with:
        name: BaXmlSplitter
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZUREAPPLICATIONID }}","clientSecret":"${{ secrets.AZUREAPPLICATIONSECRET }}","subscriptionId":"${{ secrets.AZURESUBSCRIPTIONID }}","tenantId":"${{ secrets.AZURETENANTID }}"}'
    - name: Upload artifact to Azure Blob Storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload --account-name blobstoragedev001 --name BaXmlSplitter.zip --type block --file ./BaXmlSplitter.zip --container-name bastorage --overwrite
        azcliversion: latest
