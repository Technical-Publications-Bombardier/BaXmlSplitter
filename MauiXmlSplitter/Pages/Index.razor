@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using MauiXmlSplitter.Models
@using MauiXmlSplitter.Features.AppState
@inject Fluxor.IDispatcher Dispatcher
@inject XmlSplitterViewModel ViewModel
@inject Fluxor.IState<AppState> AppState
@inject Fluxor.IState<XmlFileState> XmlFileState

<div id="splitter">
    <h1>XML Splitter</h1>

    <p>
        <label>
            <span class="text-truncate">Maintenance/Flight Manual&nbsp;</span><span>XML File:</span>
        </label>
        <span class="select-file">
            <InputText @bind-Value="ViewModel.SourceXml" />
            <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickXmlFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingXmlFile">Browse</Button>
        </span>
    </p>

    <p>
        <label>
            <span class="text-truncate">Units-of-Work&nbsp;</span><span>States File:</span>
        </label>
        @if (!(ViewModel.UowLoadSuccess.Success || ViewModel.UowLoadSuccess.Reason == XmlSplitter.ReasonForUowFailure.NoFileProvided))
        {
            <Tooltip Title="@XmlSplitterViewModel.UowFailureReasonElaboration[ViewModel.UowLoadSuccess.Reason]" Color="TooltipColor.Danger">
                <span class="select-file error">
                    <InputText @bind-Value="ViewModel.UowStatesFile"/>
                    <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickUowStatesFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingUowStatesFile">Browse</Button>
                </span>
            </Tooltip>
        }
        else
        {
            <span class="select-file">
                <InputText @bind-Value="ViewModel.UowStatesFile"/>
                <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickUowStatesFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingUowStatesFile">Browse</Button>
            </span>
        }
        <div id="uowStatesFileInvalidModal">
            <Modal @ref="ViewModel.InvalidUowStatesFileModal" Title="Invalid file chosen for units-of-work states" IsVerticallyCentered="true">
                <BodyTemplate>
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>The file <code>@ViewModel.UowStatesFile</code> does not appear to provide valid UOW states: @XmlSplitterViewModel.UowFailureReasonElaboration[ViewModel.UowLoadSuccess.Reason]
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Primary" @onclick="_ => ViewModel.InvalidUowStatesFileModal.HideAsync()">OK</Button>
                </FooterTemplate>
            </Modal>
        </div>
    </p>

    <p>
        <label>
            <span class="text-truncate">Output Directory</span><span>:</span>
        </label>
        <span class="select-file">
            <InputText @bind-Value="ViewModel.OutputDirectory"/>
            <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickOutputFolder(this, e)" Size="Size.Small">Browse</Button>
        </span>
    </p>

    <p id="selectProgram">
        <label>
            <span class="text-truncate">@ViewModel.ProgramPickerTitle CSDB&nbsp;</span><span>Program:</span>
        </label>
        <span>
            <select disabled="@(ViewModel.PossiblePrograms.Count() <= 1)" @bind="ViewModel.Program">
                @foreach (var program in ViewModel.PossiblePrograms)
                {
                    <option>@program</option>
                }
            </select>
        </span>
    </p>
    <Modal @ref="ViewModel.SelectUowModal" title="Select UOW States" UseStaticBackdrop="true" CloseOnEscape="false">
        <BodyTemplate>
            <UowStateGrid/>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="(e)=>{ ViewModel.StatesAreSelected = false; ViewModel.SelectUowModal.HideAsync(); }">Cancel</Button>
            <Button Color="ButtonColor.Primary" @onclick="(e) => ViewModel.StatesAreSelected = true">OK</Button>
        </FooterTemplate>
    </Modal>
    <p>
        @if (ViewModel.IsExecuting)
        {
            <Progress Class="mb-3">
                <ProgressBar Width="@ViewModel.Progress" Label="@(ViewModel.Progress.ToString("0.0") + "%")" Type="@ViewModel.Status.Type" Color="@ViewModel.Status.Color"/>
            </Progress>
        }
        else
        {
            <Button Color="ButtonColor.Primary" @onclick="e => ViewModel.SplitXmlCommand(this, e)" Disabled="@(!ViewModel.IsReadyToExecuteSplit)">Execute Split</Button>
        }
    </p>
    <div id="infobox">
        <span id="requirements">
            <label>Required:</label>
            <ol>
                <li class="@(ViewModel.XmlIsProvided ? "done" : "")">Select XML File</li>
                <li class="@(ViewModel.UowLoadSuccess.Success ? "done" : "")">Select UOW States File</li>
                <li class="@(ViewModel.OutDirIsProvided ? "done" : "")">Choose Output Directory</li>
                <li class="@(ViewModel.ProgramIsProvided ? "done" : "")">Select CSDB Program</li>
            </ol>
        </span>
        <ContextMenu Id="clearConsole">
            <Item OnClick="@ViewModel.ClearLogs">Clear Console</Item>
        </ContextMenu>
        <ContextMenuTrigger id="console" MenuId="clearConsole">
            <div>Status</div>
            <pre>
        <code>
            <!-- The status goes here -->
                    @foreach (var log in ViewModel.Logs.OrderBy(log => log.Key))
                    {
                            <span class=@($"logMessage {log.Value.LogLevel}")>
                                    <span class="timestamp text-truncate">
                                @log.Key.ToString("HH:mm:ss.fffffff")
                                </span>: <span class="message">
                                @log.Value.Message
                                </span>
                            </span>
                    }
        </code></pre>
        </ContextMenuTrigger>
    </div>
</div>


@code {
    [Inject] ModalService ModalService { get; set; } = default!;

    /// <inheritdoc />
    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        Dispatcher.Dispatch(new StartDeserializationAction());
        return ViewModel.InitializeAsync();
    }

    /// <summary>
    /// Clears the pseudo-console
    /// </summary>
    /// <param name="e"></param>
    protected void ClearConsole(ItemClickEventArgs e)
    {
        ViewModel.ClearLogs(e);
        StateHasChanged();
    }
}