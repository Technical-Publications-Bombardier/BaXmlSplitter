@page "/"
@using System.Globalization
@using MauiXmlSplitter.Models
@using MauiXmlSplitter.Resources
@using Microsoft.Extensions.Logging
@inject XmlSplitterViewModel ViewModel
@inject NavigationManager NavigationManager
@inject ILogger<XmlSplitterViewModel> Logger
@inject IJSRuntime JSRuntime
@inject CultureInfo Locale
<div id="splitter">
    <h1>XML Splitter</h1>

    <p>
        <label>
            <span class="text-truncate">@AppResources.MaintenanceFlightManual&nbsp;</span><span>@AppResources.XMLFile:</span>
        </label>
        <span class="select-file">
            <InputText @bind-Value="ViewModel.SourceXml" />
            <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickXmlFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingXmlFile">@AppResources.Browse</Button>
        </span>
    </p>

    <p>
        <label>
            <span class="text-truncate">@AppResources.UnitsOfWork&nbsp;</span><span>@AppResources.StatesFile:</span>
        </label>
        @if (!(ViewModel.UowLoadAttempt.Success || ViewModel.UowLoadAttempt.Reason == XmlSplitter.ReasonForUowFailure.NoFileProvided))
        {
            <Tooltip Title="@XmlSplitterViewModel.UowFailureReasonElaboration[ViewModel.UowLoadAttempt.Reason]" Color="TooltipColor.Danger">
                <span class="select-file error">
                    <InputText @bind-Value="ViewModel.UowStatesFile"/>
                    <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickUowStatesFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingUowStatesFile">@AppResources.Browse</Button>
                </span>
            </Tooltip>
        }
        else
        {
            <span class="select-file">
                <InputText @bind-Value="ViewModel.UowStatesFile"/>
                <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickUowStatesFile(this, e)" Size="Size.Small" Loading="@ViewModel.LoadingUowStatesFile">@AppResources.Browse</Button>
            </span>
        }
        <div id="uowStatesFileInvalidModal">
            <Modal @ref="ViewModel.InvalidUowStatesFileModal" Title="@AppResources.InvalidFileChosenForUnitsOfWorkStates" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge">
                <BodyTemplate>
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>@AppResources.TheFile <code>@ViewModel.UowStatesFile</code> @AppResources.DoesNotAppearToProvideValidUOWStates: @XmlSplitterViewModel.UowFailureReasonElaboration[ViewModel.UowLoadAttempt.Reason]
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Primary" @onclick="_ => ViewModel.InvalidUowStatesFileModal.HideAsync()">@AppResources.OK</Button>
                </FooterTemplate>
            </Modal>
        </div>
    </p>

    <p>
        <label>
            <span class="text-truncate">@AppResources.OutputDirectory</span><span>:</span>
        </label>
        <span class="select-file">
            <InputText @bind-Value="ViewModel.OutputDirectory"/>
            <Button Color="ButtonColor.Secondary" @onclick="e => ViewModel.PickOutputFolder(this, e)" Size="Size.Small">@AppResources.Browse</Button>
        </span>
    </p>

    <p id="selectProgram">
        <label>
            <span class="text-truncate">@ViewModel.ProgramPickerTitle CSDB&nbsp;</span><span>@AppResources.Program:</span>
        </label>
        <Tooltip Title=@AppResources.CsdbProgramInferred Color="TooltipColor.Success">
            <span id="program-checkmark" class="@(ViewModel.PossiblePrograms.Count() <= 1 ? "mdi mdi-check-circle" : "hide")"></span>
        </Tooltip>
        <span>
            <select disabled="@(ViewModel.PossiblePrograms.Count() <= 1)" @bind="ViewModel.Program">
                @foreach (var program in ViewModel.PossiblePrograms)
                {
                    <option>@program</option>
                }
            </select>
        </span>
    </p>
    <p>
        @if (ViewModel.IsExecuting)
        {
            <Progress Class="mb-3">
                <ProgressBar Width="@ViewModel.Progress" Label="@(ViewModel.Progress.ToString("0.0") + "%")" Type="@ViewModel.Status.Type" Color="@ViewModel.Status.Color"/>
            </Progress>
        }
        else
        {
            <Button Color="ButtonColor.Primary" @onclick="e => ViewModel.SplitXmlCommand(this, e)" Disabled="@(!ViewModel.IsReadyToExecuteSplit)">@AppResources.ExecuteSplit</Button>
        }
    </p>
    <div id="infobox">
        <span id="requirements">
            <label>@AppResources.Required:</label>
            <ol>
                <li class="@(ViewModel.XmlIsProvided ? "done" : "")">@AppResources.SelectXMLFile</li>
                <li class="@(ViewModel.UowLoadAttempt.Success ? "done" : "")">@AppResources.SelectUOWFile</li>
                <li class="@(ViewModel.OutDirIsProvided ? "done" : "")">@AppResources.ChooseOutputDirectory</li>
                <li class="@(ViewModel.ProgramIsProvided || ViewModel.PossiblePrograms.Count() == 1 ? "done" : "")">@AppResources.SelectCSDBProgram</li>
            </ol>
        </span>
        <ContextMenu Id="clearConsole">
            <Item OnClick="@ViewModel.ClearLogs">@AppResources.ClearConsole</Item>
        </ContextMenu>
        <ContextMenuTrigger id="console" MenuId="clearConsole">
            <div>@AppResources.Status</div>
            <pre>
        <code>
            <!-- The status goes here -->
                    @foreach (var log in ViewModel.Logs.OrderBy(log => log.Key))
                    {
                            <span class=@($"logMessage {log.Value.LogLevel}")>
                                    <span class="timestamp text-truncate">
                                @log.Key.ToString("HH:mm:ss.fffffff")
                                </span>: <span class="message">
                                @log.Value.Message
                                </span>
                            </span>
                    }
            <span class="logMessage Information"><span class="timestamp text-truncate">&nbsp;</span>: <span class="message">&nbsp;</span></span>
        </code></pre>
        </ContextMenuTrigger>
    </div>
</div>

<div id="selectUow">
    <Modal @ref="ViewModel.SelectUowModal" title="@AppResources.SelectUnitsOfWorkToExtractByStates" UseStaticBackdrop="true" CloseOnEscape="false" IsVerticallyCentered="true">
        <BodyTemplate>
            <UowStateGrid/>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="(e)=>{ ViewModel.StatesAreSelected = false; ViewModel.SelectUowModal.HideAsync(); ViewModel.UowModalClosed.SetCanceled();  }">@AppResources.Cancel</Button>
            <Button Color="ButtonColor.Primary" @onclick="(e) => { ViewModel.StatesAreSelected = true; ViewModel.SelectUowModal.HideAsync(); ViewModel.UowModalClosed.SetResult(true); }">@AppResources.OK</Button>
        </FooterTemplate>
    </Modal>
</div>

@code {
    [Inject] ModalService ModalService { get; set; } = default!;
    /// <summary>
    ///  Navigates to the <see cref="SplittingReport"/> report page
    /// </summary>
    /// <param name="outputDir"></param>
    private void NavigateToReportPage(string outputDir)
    {
        NavigationManager.NavigateTo($"/report?{nameof(outputDir)}={outputDir}");
    }
    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture = Locale;
        await ViewModel.InitializeAsync();
        if (SynchronizationContext.Current is not null)
        {
            ViewModel.NavigateToReport += NavigateToReportPage;
            if (Logger is BaLogger baLogger)
            {
                Logger = new BaLogger(SynchronizationContext.Current, ViewModel.Logs, LogLevel.Trace);
                baLogger.OnLogAdded += StateHasChanged;
            }
        }
        ViewModel.PropertyChanged += async (sender, e) =>
        {
            if (e.PropertyName is nameof(ViewModel.UowStatesFile) or nameof(ViewModel.SourceXml) or nameof(ViewModel.PossiblePrograms) or nameof(ViewModel.LoadingUowStatesFile) or nameof(ViewModel.IsReadyToExecuteSplit) or nameof(ViewModel.LoadingXmlFile) or nameof(ViewModel.OutputDirectory) or nameof(ViewModel.ProgramIsProvided))
                await InvokeAsync(StateHasChanged);
        };
        ViewModel.PropertyChanged += async (sender, e) =>
        {
            if (e.PropertyName is not nameof(ViewModel.PossiblePrograms) || ViewModel.PossiblePrograms.Count() != 1) return;
            ViewModel.Program = ViewModel.PossiblePrograms.First();
            await InvokeAsync(StateHasChanged);
        };
    }
    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupAutoScroll", "#console > pre > code");
        }
    }
    /// <summary>
    /// Clears the pseudo-console
    /// </summary>
    /// <param name="e"></param>
    protected void ClearConsole(ItemClickEventArgs e)
    {
        ViewModel.ClearLogs(e);
        StateHasChanged();
    }
}